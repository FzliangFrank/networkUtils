% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_visModification.R, R/mod_visNet.R
\name{mod_visNetModification_server}
\alias{mod_visNetModification_server}
\alias{mod_visNet_}
\alias{mod_visNet_server}
\title{visModification Server Functions}
\usage{
mod_visNetModification_server(
  id,
  igraphObj,
  dev = F,
  hard_delete = T,
  NodeAttrTooltip = T,
  EdgeAttrTooltip = T,
  domain = getDefaultReactiveDomain(),
  options = NULL,
  layout = "layout_nicely"
)

mod_visNet_server(id, graph_rct, debug = F, options = NULL, layout = NULL)
}
\arguments{
\item{id}{shiny}

\item{igraphObj}{a reactive graph object}

\item{domain}{session for}

\item{options}{list of option passed to `visSetOptions`}

\item{layout}{igraph layout to put in `visNetwork::visIgraphLayout`

The easiest way to use both modification server and interaction server.
mod_visNet_server links both modification and interaction UI and by doing so
make it easy}

\item{graph_rct}{reactive expression of igraph}
}
\value{
reactiveValues $Curent and $Main and more

reactive list
}
\description{
visModification Server Functions

visNet Server Functions
}
\details{
$Current is a reactive igraph Object that every is being modified now
$Main is the igraph Object that has been committed and saved
In addition it return a set of `reactiveValues` which monitor graph changes
and track node that is currently clicked.

list of `Current`, `Main` `click_node` and `click_edge`
`Main` for graph that has been committed editing;
`Current` for graph on display;
Two additional `click_node` and `click_edge` let you track
edges and node currently clicked
}
