% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_visInteraction.R, R/mod_visModification.R,
%   R/mod_visNet.R
\name{mod_visNetInteraction_ui}
\alias{mod_visNetInteraction_ui}
\alias{mod_visNetInteraction_server}
\alias{mod_visNetModification_ui}
\alias{mod_visNetModification_server}
\alias{mod_visNet_}
\alias{mod_visNet_server}
\title{visNetInteraction}
\usage{
mod_visNetInteraction_ui(id)

mod_visNetInteraction_server(
  id,
  igraph_rct,
  e_ignore = c(),
  v_ignore = c(),
  show_hidden = F,
  domain = getDefaultReactiveDomain()
)

mod_visNetModification_ui(id)

mod_visNetModification_server(
  id,
  igraphObj,
  dev = F,
  hard_delete = T,
  NodeAttrTooltip = T,
  EdgeAttrTooltip = T,
  domain = getDefaultReactiveDomain(),
  visNet_options = NULL,
  layout = "layout_nicely"
)

mod_visNet_server(
  id,
  graph_rct,
  debug = F,
  visNet_options = NULL,
  layout = NULL,
  NodeAttrTooltip = F,
  EdgeAttrTooltip = F
)
}
\arguments{
\item{id, input, output, session}{Internal parameters for {shiny}.}

\item{igraph_rct}{reactive expression for igraph}

\item{e_ignore, v_ignore}{a vector of node/edge attributes. This tells the
interactive UI to stop parsing specific attribute into searchable UI.}

\item{show_hidden}{used in conjunction with `e_ignore` and `v_ignore`. If you
have an attribute begain/has with '.' This flag will show it when set to TRUE.
This is useful against attributes created by tidygraph (`.tidygraph_e_index`)
or when you have to create color attributes for visNetwork (`color.border`)}

\item{domain}{session for}

\item{igraphObj}{a reactive graph object}

\item{NodeAttrTooltip, EdgeAttrTooltip}{when these two flag are set to ture
attributes will be automatically parsed into tooltips, following formula
'attrName: attr'. There is no good parsing for time series type.}

\item{visNet_options}{list of option passed to `visSetOptions`
this could also be reactive}

\item{layout}{igraph layout to put in `visNetwork::visIgraphLayout`
could be static or reactive.

The easiest way to use both modification server and interaction server.
mod_visNet_server links both modification and interaction UI and by doing so
make it easy}

\item{graph_rct}{reactive expression of igraph}

\item{debug}{this flag will create a text output for tracking change.}

\item{id}{shiny}
}
\value{
reactiveValues $Curent and $Main and more

reactive list
}
\description{
A shiny Module.

This module let you interact with graph
Require visnetwork rendered in shiny to have base id `visNetworkId`

A shiny Module.
}
\details{
$Current is a reactive igraph Object that every is being modified now
$Main is the igraph Object that has been committed and saved
In addition it return a set of `reactiveValues` which monitor graph changes
and track node that is currently clicked.

list of `Current`, `Main` `click_node` and `click_edge`
`Main` for graph that has been committed editing;
`Current` for graph on display;
Two additional `click_node` and `click_edge` let you track
edges and node currently clicked
}
